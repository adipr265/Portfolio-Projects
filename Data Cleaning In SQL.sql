-- Let's start by selecting the data
SELECT *
FROM PORTFOLIO1.NASHVILLE_HOUSING_DATA
;




-- Task 1: Standardizing the date format
SELECT SALEDATE, CONVERT(SALEDATE, DATE) AS SALEDATEC
FROM PORTFOLIO1.NASHVILLE_HOUSING_DATA
;

UPDATE portfolio1.nashville_housing_data
SET SALEDATE= CONVERT(SALEDATE, DATE)
; -- This does not work for some reason

ALTER TABLE PORTFOLIO1.NASHVILLE_HOUSING_DATA
ADD SALEDATECONVERTED DATE
; -- So we are creating a new column with date data type

UPDATE portfolio1.nashville_housing_data
SET SALEDATECONVERTED= CONVERT(SALEDATE, DATE)
; -- And then storing the converted value in this column

SET sql_safe_updates=0; -- this is done to eliminate error code

ALTER TABLE PORTFOLIO1.NASHVILLE_HOUSING_DATA
DROP COLUMN SALEDATE
; -- now we drop the sale date column and rename the newly defined column as sale date

ALTER TABLE PORTFOLIO1.NASHVILLE_HOUSING_DATA
RENAME COLUMN SALEDATECONVERTED TO SaleDate
;

ALTER TABLE PORTFOLIO1.NASHVILLE_HOUSING_DATA
MODIFY SaleDate DATE AFTER PROPERTYADDRESS
; -- finally we change the position of this column to be in the same place as the original sale date




-- Task 2: Populate property address data

SELECT *
FROM PORTFOLIO1.NASHVILLE_HOUSING_DATA
WHERE PROPERTYADDRESS IS NULL
-- ORDER BY PARCELID
;

SELECT ORG.PARCELID, ORG.PROPERTYADDRESS, ORG.UNIQUEID, NULLREPL.PARCELID, NULLREPL.PROPERTYADDRESS, NULLREPL.UNIQUEID, IFNULL(NULLREPL.PROPERTYADDRESS, ORG.PROPERTYADDRESS) AS REPLACED_ADDRESS
FROM PORTFOLIO1.NASHVILLE_HOUSING_DATA ORG
JOIN PORTFOLIO1.NASHVILLE_HOUSING_DATA NULLREPL
    ON ORG.PARCELID = NULLREPL.PARCELID
    AND ORG.UNIQUEID <> NULLREPL.UNIQUEID
WHERE NULLREPL.PROPERTYADDRESS IS NULL
;

SET sql_safe_updates=0;

UPDATE PORTFOLIO1.NASHVILLE_HOUSING_DATA NULLREPL
JOIN PORTFOLIO1.NASHVILLE_HOUSING_DATA ORG
    ON ORG.PARCELID = NULLREPL.PARCELID
    AND ORG.UNIQUEID <> NULLREPL.UNIQUEID
SET NULLREPL.PROPERTYADDRESS = IFNULL(NULLREPL.PROPERTYADDRESS, ORG.PROPERTYADDRESS)
WHERE NULLREPL.PROPERTYADDRESS IS NULL
;





-- Task 3: Breaking out address into individual columns (Address, City, State)

SELECT PROPERTYADDRESS
FROM PORTFOLIO1.NASHVILLE_HOUSING_DATA
;

SELECT 
SUBSTRING(PROPERTYADDRESS, 1, LOCATE(',', PROPERTYADDRESS) -1) AS ADDRESS,
SUBSTRING(PROPERTYADDRESS, LOCATE(',', PROPERTYADDRESS) +1, CHAR_LENGTH(PROPERTYADDRESS)) AS CITY
FROM PORTFOLIO1.NASHVILLE_HOUSING_DATA
;

ALTER TABLE PORTFOLIO1.NASHVILLE_HOUSING_DATA
ADD PROPERTYSPLITADDRESS VARCHAR(255)
;

SET sql_safe_updates=0;

UPDATE PORTFOLIO1.NASHVILLE_HOUSING_DATA
SET PropertySplitAddress= SUBSTRING(PROPERTYADDRESS, 1, LOCATE(',', PROPERTYADDRESS) -1)
;

ALTER TABLE PORTFOLIO1.NASHVILLE_HOUSING_DATA
ADD PROPERTYSPLITCITY VARCHAR(100)
;

UPDATE PORTFOLIO1.NASHVILLE_HOUSING_DATA
SET PropertySplitCity= SUBSTRING(PROPERTYADDRESS, LOCATE(',', PROPERTYADDRESS) +1, CHAR_LENGTH(PROPERTYADDRESS)) 
;

-- Now we do the same for the owner address
SELECT OWNERADDRESS 
FROM PORTFOLIO1.NASHVILLE_HOUSING_DATA
;

SELECT 
SUBSTRING_INDEX(SUBSTRING_INDEX(OWNERADDRESS, ',', 1 ), ',', -1) AS OWNERADDRESS,
SUBSTRING_INDEX(SUBSTRING_INDEX(OWNERADDRESS, ',', 2 ), ',', -1) AS OWNERCITY,
SUBSTRING_INDEX(SUBSTRING_INDEX(OWNERADDRESS, ',', 3), ',', -1) AS OWNERSTATE
FROM PORTFOLIO1.NASHVILLE_HOUSING_DATA
;

ALTER TABLE portfolio1.nashville_housing_data
ADD OWNERSPLITADDRESS VARCHAR(250),
ADD OWNERSPLITCITY VARCHAR(100),
ADD OWNERSPLITSTATE VARCHAR(50)
;

UPDATE portfolio1.nashville_housing_data
SET OwnerSplitAddress= SUBSTRING_INDEX(SUBSTRING_INDEX(OWNERADDRESS, ',', 1 ), ',', -1),
    OwnerSplitCity= SUBSTRING_INDEX(SUBSTRING_INDEX(OWNERADDRESS, ',', 2 ), ',', -1),
    OwnerSplitState= SUBSTRING_INDEX(SUBSTRING_INDEX(OWNERADDRESS, ',', 3), ',', -1)
;





-- Task 4: Change Y and N to Yes and No in "SoldAsVacant" field
SELECT DISTINCT(SOLDASVACANT), COUNT(SOLDASVACANT)
FROM portfolio1.nashville_housing_data
GROUP BY SOLDASVACANT
ORDER BY 2
;

SELECT SOLDASVACANT,
	   CASE WHEN SOLDASVACANT='Y' THEN 'Yes'
            WHEN SOLDASVACANT='N' THEN 'No'
            ELSE SOLDASVACANT
	   END AS TRANSFORMEDDATA
FROM PORTFOLIO1.NASHVILLE_HOUSING_DATA
WHERE SOLDASVACANT = 'N'
OR SOLDASVACANT = 'Y'
;

UPDATE PORTFOLIO1.NASHVILLE_HOUSING_DATA
SET SOLDASVACANT = CASE WHEN SOLDASVACANT='Y' THEN 'Yes'
                        WHEN SOLDASVACANT='N' THEN 'No'
                        ELSE SOLDASVACANT
	               END 
;





-- Task 5: Remove Duplicate Records

CREATE TEMPORARY TABLE ROWNUMTABLE AS (
SELECT *,
  ROW_NUMBER() OVER( PARTITION BY PARCELID, LANDUSE, PROPERTYADDRESS, SALEDATE, SALEPRICE, LEGALREFERENCE ORDER BY UNIQUEID) ROW_NUM
FROM PORTFOLIO1.NASHVILLE_HOUSING_DATA
)
;

DELETE
FROM ROWNUMTABLE
WHERE ROW_NUM>1
;

SELECT *
FROM ROWNUMTABLE
WHERE ROW_NUM>1
ORDER BY PROPERTYADDRESS
;





-- Task 6: Delete unused columns

SELECT *
FROM PORTFOLIO1.NASHVILLE_HOUSING_DATA
;

ALTER TABLE PORTFOLIO1.NASHVILLE_HOUSING_DATA
DROP COLUMN PROPERTYADDRESS, 
DROP COLUMN OWNERADDRESS, 
DROP COLUMN TAXDISTRICT
;
